{"/database":{"title":"Database","data":{}},"/database/custom-tables":{"title":"Custom Tables","data":{}},"/":{"title":"Introduction","data":{"":"Oberon plugin is an alternative plugin to WordPresses Memberpress plugin. This document outlines the implementation details of the plugin.Following are the key areas covered in this document.\nClass and entity relationship diagrams of the plugin.\nDesign patterns used in the plugin.\nLocation of core source code files and their corresponding function.\nBuild processes including\nTesting\nDevelopment\nCompilation\nDeployment"}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/javascript/events/MemberLogin":{"title":"Memberlogin","data":{"memberlogin#MemberLogin":"obrn_event_member_login","description#Description":"This event is triggered when a member logs in.","event-properties#Event Properties":"detail (Object): Contains detailed information about the login.\nuser (Object): Contains user-specific details related to the login attempt.\nuser_login (String): Represents the email ID or username of the member.\nType: String\nExample: \"example@email.com\"\nremember (Boolean): Specifies whether the member wants the application to remember their login for future visits.\nType: Boolean\nExample: true or false\nresponse (Object): Contains the result of the login attempt.\nmessage (String): A message regarding the login attempt.\nType: String\nExample: \"Login successful\"\nsuccess (Boolean): Indicates if the login was successful or not.\nType: Boolean\nExample: true or false","usage#Usage":"const memberLoginEvent: CustomEvent = new CustomEvent('obrn_event_member_login', {\n    detail: {\n        user: <Login>{\n            user_login: '',\n            remember: true|false\n        },\n        response: <AuthResponse>{\n            message: '',\n            success: true|false\n        }\n    }\n});"}},"/javascript/functions/AttemptForgot":{"title":"Attemptforgot","data":{"attemptforgot#AttemptForgot":"","overview#Overview":"The AttemptForgot function is designed to trigger the password reset sequence when provided with an email. It sends a REST API request to a custom endpoint and determines the success based on the response received.","function-definition#Function Definition":"const AttemptForgot = async (reset: Forgot): Promise<ForgotResponse>","parameters#Parameters":"reset (Forgot): An object containing an email. This is used to initiate the password reset process.","returns#Returns":"Promise<ForgotResponse>: A promise that resolves to an object. If the process is successful, the object will contain a success property set to true and a resetLink property. If unsuccessful, it will return a success property set to false and a message property with information regarding the failure. If the request fails altogether, the function will return a generic message.","response-object-structure#Response Object Structure":"Property\tType\tDescription\tsuccess\tboolean\tIndicates the success or failure of the function. true if successful, false otherwise.\tmessage\tstring\tA message providing information about the failure reason, if applicable.\tresetLink\tstring\t(Optional) Contains the valid reset link when the function is successful. Otherwise, it will not be included.","function-details#Function Details":"Construct the API Url: The function constructs the API URL by concatenating the base URL from obrnArgs.apiUrl with the endpoint /v1/auth/forgot.\nReset Password POST Request: Using the Fetch API, the function sends a POST request to the constructed API URL. The request includes headers for authentication and the email for password reset in the body.\nDetermine Success: After sending the request, the function waits for a response. If a valid response is received, it returns the response. If there's an issue with the fetch request or it fails, a default error message \"Something went wrong\" is returned.","dependencies#Dependencies":"Forgot: An interface imported from ../../interfaces/Forgot.\nObrnArgs: An interface imported from ../../interfaces/ObrnArgs. This is used to access the API's base URL and the nonce for authentication.","version#Version":"Introduced in version 0.1.0."}},"/javascript/functions/AttemptLogin":{"title":"Attemptlogin","data":{"attemptlogin#AttemptLogin":"","overview#Overview":"The AttemptLogin function is designed to authenticate a user by either using a password or a magic link. It sends a REST API request to a custom endpoint to verify user credentials or to send a magic link email.","function-definition#Function Definition":"const AttemptLogin = async (details: ILogin): Promise<AuthResponse>","parameters#Parameters":"details (ILogin): An object containing user-inputted login details. Depending on the properties set within this object, the function may either try to authenticate using a password or send a magic link email.","returns#Returns":"Promise<AuthResponse>: A promise that resolves to an object. If the login process is successful, the object will contain a success property set to true. If unsuccessful, it will return a success property set to false and a message property with information regarding the failure. If the request fails altogether, the function will return a generic message \"Something went wrong\".","response-object-structure#Response Object Structure":"Property\tType\tDescription\tmessage\tstring\tA message providing information about the operation or the failure reason, if applicable.\tsuccess\tboolean\tIndicates the success or failure of the function. true if successful, false otherwise.","function-details#Function Details":"Construct the API Url: The function constructs the API URL by concatenating the base URL from obrnArgs.apiUrl with the endpoint /v1/auth/login.\nLogin POST Request: Using the Fetch API, the function sends a POST request to the constructed API URL. The request includes headers for authentication and the user-inputted details in the body.\nDetermine Success: After sending the request, the function waits for a response. If a valid response is received, it returns the response. If there's an issue with the fetch request or it fails, a default error message \"Something went wrong\" is returned.","dependencies#Dependencies":"ILogin: An interface imported from ../../interfaces/Login.\nObrnArgs: An interface imported from ../../interfaces/ObrnArgs. This is used to access the API's base URL and the nonce for authentication.","version#Version":"Introduced in version 0.1.0."}},"/javascript/functions/ChangeLoginScreen":{"title":"Changeloginscreen","data":{"changeloginscreen#ChangeLoginScreen":"","overview#Overview":"The ChangeLoginScreen function is responsible for toggling between the login and forgotten password screens on a login form. It checks the currently active screen and switches its visibility with the hidden one.","function-definition#Function Definition":"const ChangeLoginScreen = (): void","parameters#Parameters":"None","returns#Returns":"void: This function does not return a value.","function-details#Function Details":"Get Login Container: The function starts by acquiring a reference to the container div with the ID 'obrnLogin__Container'.\nIdentify Active Screen: Within the container, it identifies the login and forgotten password screens using their respective IDs ('obrnLogin__Login' and 'obrnLogin__Forgot'). It then determines which screen is currently active.\nToggle Screens: Depending on the currently active screen:\nIf the login screen is active, it is hidden, and the forgotten password screen is shown.\nIf the forgotten password screen is active, it is hidden, and the login screen is shown.\nUpdate Class List: The active class is removed from the currently active screen and added to the previously hidden one to mark the change in visibility.","dependencies#Dependencies":"This function directly manipulates the DOM and relies on certain elements with specific IDs being present:\nobrnLogin__Container: The container that wraps both login screens.\nobrnLogin__Login: The actual login screen element.\nobrnLogin__Forgot: The forgotten password screen element.","usage#Usage":"This function can be triggered, for example, by a button click or any other event, to seamlessly switch between the login and forgotten password screens without needing to reload or navigate to a new page.","version#Version":"Introduced in version 0.1.0."}},"/javascript/functions/CheckMembershipPriceValid":{"title":"Checkmembershippricevalid","data":{"checkmembershippricevalid#CheckMembershipPriceValid":"","overview#Overview":"The CheckMembershipPriceValid function is responsible for ensuring the validity of a membership's price by sending a request to the server. By passing in membership details, coupon data, and tax rates, the server checks if the client's calculated price matches its expectations. This is particularly useful to ensure that client-side pricing calculations have not been tampered with.","function-definition#Function Definition":"const CheckMembershipPriceValid = async (priceData: PriceData): Promise<boolean>","parameters#Parameters":"priceData (PriceData): An object containing membership details, tax rates, coupon data, and other relevant pricing details.","returns#Returns":"Promise<boolean>: Returns a Promise resolving to true if the price is valid, otherwise false.","function-details#Function Details":"Construct Endpoint URL: Utilizes the provided priceData to construct the appropriate API endpoint.\nFetch Price Validation: Sends a request to the server for price validation.\nReturn Result: Analyzes the server's response to determine if the price is valid or not. If the server returns no errors, the function resolves to true, otherwise it resolves to false.","dependencies#Dependencies":"encodeDataToURL: This function uses the encodeDataToURL helper function to serialize the provided priceData object into a query string format suitable for the API request.","version#Version":"Introduced in version 0.1.0.","documentation-for-encodedatatourl-helper-function#Documentation for encodeDataToURL Helper Function":"","overview-1#Overview":"The encodeDataToURL function is a utility function designed to convert an object into a URL-encoded string. This string can then be appended to a URL to form a query string.","function-definition-1#Function Definition":"const encodeDataToURL = (data: any): string","parameters-1#Parameters":"data (any): An object containing key-value pairs that will be converted to a URL-encoded string.","returns-1#Returns":"string: A URL-encoded string representation of the provided data object.","function-details-1#Function Details":"Object Iteration: Iterates through each key-value pair of the provided data object.\nURL Encoding: Each key and value is URL-encoded to ensure they can be safely appended to a URL.\nJoin Pairs: Joins each key-value pair using the '=' character and then joins each of these pairs with the '&' character to form the final URL-encoded string.","usage#Usage":"Use this function when you need to convert an object into a query string format to append to a URL, especially when constructing API endpoints."}},"/javascript/functions/CreateUserSubscription":{"title":"Createusersubscription","data":{"createusersubscription#CreateUserSubscription":"","overview#Overview":"The CreateUserSubscription function is designed to initialize a subscription for a user. Depending on the payment method used, the function handles the creation of subscriptions differently. In case of offline or PayPal payments, the function will instantiate a subscription and a \"paid\" transaction. Conversely, for Stripe payments, it establishes a \"pending\" transaction, which awaits a successful charge upon reaching the thank-you page.","function-definition#Function Definition":"const CreateUserSubscription = async (\n    paymentRequest: PaymentRequest\n): Promise<StartSignup>","parameters#Parameters":"paymentRequest (PaymentRequest): An object containing detailed information about the payment. It includes attributes like the gateway, prices, user ID, currency type, applicable coupon, tax details, and (optionally) a PayPal order ID.","returns#Returns":"Promise<StartSignup>: This function returns a Promise that resolves to a StartSignup object. This object encapsulates a subscription and a transaction instance, reflecting the outcome of the subscription creation process.","function-details#Function Details":"API URL Construction: Constructs the API URL designated for initiating user subscriptions.\nSubscription Request: Executes a POST request to the API, transmitting the payment details and expecting a response containing the subscription and transaction details.\nResponse Handling: Parses the server's response and returns the relevant details.","dependencies#Dependencies":"obrnArgs: This function utilizes the obrnArgs object to derive the API URL and other pertinent configurations.\nInterfaces: The function leans on multiple interfaces such as PaymentRequest, StartSignup, Subscription, and Transaction for structured data handling.","usage#Usage":"The CreateUserSubscription function is paramount in applications or platforms offering subscription-based services or features. Ensuring accurate implementation and response handling is vital to offer users a seamless subscription experience and confirm the successful creation of their subscription."}},"/javascript/functions/StripeCreatePaymentIntent":{"title":"Stripecreatepaymentintent","data":{"stripecreatepaymentintent#StripeCreatePaymentIntent":"","overview#Overview":"The StripeCreatePaymentIntent function is a crucial component for integrating Stripe payments. It's tasked with obtaining a client_id from the backend which is required by the Stripe SDK to process payments. To achieve this, the function communicates with a REST endpoint, sending the intended amount and currency type. The endpoint then generates and returns a client secret to facilitate the transaction.","function-definition#Function Definition":"const StripeCreatePaymentIntent = async (\n    amount: number,\n    currency: string\n): Promise<string | boolean>","parameters#Parameters":"amount (number): Represents the amount that is to be charged.\ncurrency (string): Specifies the currency type for the charge, e.g., 'USD', 'EUR', etc.","returns#Returns":"Promise<string | boolean>: The function returns a Promise. On success, it resolves to a string containing the client secret code. If the operation fails, it resolves to false.","function-details#Function Details":"API URL Construction: A URL is constructed to communicate with the relevant API endpoint that handles Stripe payment intents.\nClient Secret Request: The function sends a POST request to the endpoint, passing the required amount and currency data.\nHandle Response: Upon receiving a response, the function checks for any errors or failed intents. If there are issues, it returns false. Otherwise, it retrieves and returns the client secret.","dependencies#Dependencies":"obrnArgs: This function relies on the obrnArgs object to access the API URL and other necessary configurations.","usage#Usage":"This function is specifically tailored for Stripe payments integration. It should be utilized whenever initiating a Stripe payment to securely fetch the required client_id from the backend."}},"/javascript/functions/UpdateProfile":{"title":"Updateprofile","data":{"updateprofile#UpdateProfile":"","overview#Overview":"The UpdateProfile function allows for updating user profile information via a custom REST API endpoint. By using this function, you can modify three primary attributes of a user profile: the first name, last name, and email. The server-side mechanism manages user authentication using nonces that are sent along as headers. When the profile update is successful, changes are reflected in the database. If any error occurs, the function will provide feedback in the form of the ProfileResponse object.","function-definition#Function Definition":"const UpdateProfile = async (\n    profileData: ProfileData\n): Promise<ProfileResponse>","parameters#Parameters":"profileData (ProfileData): Contains the details that need to be updated. It should have:\nfirst_name (string): The first name of the user.\nlast_name (string): The last name of the user.\nuser_email (string): The email address of the user.","returns#Returns":"Promise<ProfileResponse>: The function returns a Promise. On successful profile update, it resolves to an object containing the success status, message, and potential errors. In case of a failed request, a generic error message \"Something went wrong\" is provided with a success property set to false.","function-details#Function Details":"API URL Construction: The function constructs the API URL meant for updating user profiles.\nProfile Update Request: A POST request is sent to the previously mentioned API endpoint, including the profile data to be updated.\nHandle Response: The function waits for a response from the server. If there's a successful profile update, the updated profile data is returned. In the case of any failures, an error message is generated and returned.","dependencies#Dependencies":"obrnArgs: This function depends on the obrnArgs object, which provides access to the API URL and other necessary configurations.","usage#Usage":"The UpdateProfile function is essential for applications and platforms that allow users to update their profile details. Ensure to handle the response gracefully to provide users with accurate feedback based on the operation's outcome."}},"/javascript/events/MemberLoginAttempt":{"title":"Memberloginattempt","data":{"memberloginattempt#MemberLoginAttempt":"obrn_event_member_login_attempt","description#Description":"This event is triggered when a member attempts to log in. It triggers before the member is logged in.","event-properties#Event Properties":"detail (Object): Contains detailed information about the login attempt.\nuser_login (String): Represents the email ID or username of the member trying to log in.\nType: String\nExample: \"example@email.com\"\nremember (Boolean): Specifies whether the member wants the application to remember their login for future visits.\nType: Boolean\nExample: true or false","usage#Usage":"const memberLoginAttemptEvent: CustomEvent = new CustomEvent('obrn_event_member_login_attempt', {\n    detail: <Login>{\n        user_login: '',\n        remember: true|false,\n    }\n});"}},"/javascript/functions/AttemptReset":{"title":"Attemptreset","data":{"attemptreset#AttemptReset":"","overview#Overview":"The AttemptReset function is designed to facilitate the process of resetting a user's password. It requires specific reset keys and the new password. A REST API request is made to update the password. If the process is successful, the user's password is updated, otherwise appropriate error messages are returned.","function-definition#Function Definition":"const AttemptReset = async (reset: Reset): Promise<ResetResponse>","parameters#Parameters":"reset (Reset): An object containing reset password keys and request details.","returns#Returns":"Promise<ResetResponse>: A promise that resolves to an object. On a successful reset, the object will contain a success property set to true. If the process is unsuccessful, it will return a success property set to false and a message property with information regarding the failure. If there are additional errors, an errors property containing an object will also be included. If the request fails to process altogether, a generic error message \"Something went wrong\" is returned.","response-object-structure#Response Object Structure":"Property\tType\tDescription\tsuccess\tboolean\tIndicates the success or failure of the function. true if successful, false otherwise.\tmessage\tstring\tA message providing information about the operation or the failure reason, if applicable.\terrors\tobject\t(Optional) Contains an object with specific error details when the function is unsuccessful. Otherwise, not present.","function-details#Function Details":"Construct the API Url: The function constructs the API URL by concatenating the base URL from obrnArgs.apiUrl with the endpoint /v1/auth/reset.\nReset Password POST Request: Using the Fetch API, the function sends a POST request to the constructed API URL. The request includes headers for authentication and the reset details in the body.\nDetermine Success: After sending the request, the function waits for a response. If a valid response is received, it returns the response. If there's an issue with the fetch request or it fails, a default error message \"Something went wrong\" is returned.","dependencies#Dependencies":"Reset: An interface imported from ../../interfaces/Reset.\nObrnArgs: An interface imported from ../../interfaces/ObrnArgs. This is used to access the API's base URL and the nonce for authentication.","version#Version":"Introduced in version 0.1.0."}},"/javascript/functions/VerifyCoupon":{"title":"Verifycoupon","data":{"verifycoupon#VerifyCoupon":"","overview#Overview":"The VerifyCoupon function serves as a mechanism to check and validate coupon codes. It sends a request to a custom REST API endpoint, aiming to validate the user-entered coupon code. The function will verify if the coupon is valid and determine if the user has the necessary permissions to apply the provided coupon.","function-definition#Function Definition":"const VerifyCoupon = async (coupon: string): Promise<boolean | Coupon>","parameters#Parameters":"coupon (string): The coupon code that needs validation.","returns#Returns":"Promise<boolean|Coupon>: The function returns a Promise. Upon successful validation, it resolves to a Coupon object containing details about the coupon. If the coupon is not valid, it resolves to false.","function-details#Function Details":"API URL Construction: The function first constructs the API URL intended for verifying coupons, appending the user-provided coupon code as a search parameter.\nVerification Request: A fetch call is made to the aforementioned API endpoint.\nHandle Response: The function processes the server response. If the coupon is verified successfully and the status is 200, the coupon details are returned. If not, the function resolves to false.","dependencies#Dependencies":"obrnArgs: This function leans on the obrnArgs object for the API URL and other related configurations.","usage#Usage":"The VerifyCoupon function is vital for applications and platforms offering discounts and promotions through coupon codes. Properly handling the response is crucial to offer users accurate feedback based on the coupon validation outcome."}},"/structure/classes/models/coupon":{"title":"Coupon Model","data":{"":"The Oberon Coupon Model handles various coupon related functionalities and data within the Oberon system.","properties#Properties":"Property Name\tType\tDescription\tVersion\tid\tint\tThe ID of the coupon\t0.1.0\tcoupon\tstring\tThe coupon code/name\t0.1.0\ttype\tstring\tThe type of coupon\t0.1.0\tvalue\tint\tThe value or discount of the coupon\t0.1.0\tusage_count\tint\tThe number of times the coupon has been used\t0.1.0\tdescription\tstring\tDescription of the coupon\t0.1.0\tdate_start\tstring\tStart date of coupon's validity\t0.1.0\tdate_end\tstring\tEnd date of coupon's validity\t0.1.0\tuser_restricted\tarray/bool\tUser restrictions for the coupon\t0.1.0\tmembership_restricted\tarray/bool\tMembership restrictions for the coupon\t0.1.0","methods#Methods":"","__construct#__construct":"Parameters:\n$id: The ID of the coupon.\nDescription: Constructs the coupon model, initializes with default values and given ID.Version: 0.1.0","init#init":"Parameters:\n$default: Default values for the coupon properties.\n$id: The ID of the coupon.\nDescription: Initializes the coupon with given default values and ID.Version: 0.1.0","getbytitle#getByTitle":"Parameters:\n$coupon: The title/name of the coupon.\nDescription: Searches for a coupon by its title/name.Version: Not provided, assuming 0.1.0","usagecount#usageCount":"Description: Fetches the number of times the coupon has been used.Version: Not provided, assuming 0.1.0"}},"/structure/classes/models/member":{"title":"Member Model","data":{"":"The Oberon Member Model represents individual members in the Oberon system. It provides various methods for managing and retrieving member-related data.","properties#Properties":"Property Name\tType\tDescription\tVersion\tuser_id\tint\tUser ID associated with the member\t0.1.0\tis_logged_in\tbool\tChecks if the user is logged in\t0.1.0\tdisplay_name\tstring\tMember's display name\t0.1.0\temail\tstring\tMember's email address\t0.1.0\trole\tstring\tMember's role\t0.1.0\tregistration_date\tstring\tMember's registration date\t0.1.0","methods#Methods":"","__construct#__construct":"Parameters:\n$user_id: The User ID of the member.\nDescription: Initializes the model and sets member properties based on WordPress user data.Version: 0.1.0","init#init":"Parameters:\n$user_id: The User ID of the member.\nDescription: Initializes member properties based on WordPress user data.Version: 0.1.0","save#save":"Returns: boolDescription: Save the member data to the database.Version: 0.1.0","delete#delete":"Returns: boolDescription: Delete the member's user account.Version: 0.1.0","subscriptions#subscriptions":"Returns: ArrayDescription: Retrieves a list of subscriptions for the member.Version: 0.1.0","transactions#transactions":"Returns: ArrayDescription: Retrieves a list of transactions for the member.Version: 0.1.0","hasactivesubscription#hasActiveSubscription":"Returns: boolDescription: Check if user has an active subscription.Version: 0.1.0"}},"/structure/classes/models/event":{"title":"Event Model","data":{"":"The Oberon Event Model manages various events within the Oberon system. Each event can be triggered and have associated data.","properties#Properties":"Property Name\tType\tDescription\tVersion\tevent\tstring\tThe name of the event\t0.1.0\ttime\tstring\tTimestamp for when the event happened\t0.1.0\tdata\tarray<mixed>\tData associated with the event\t0.1.0\tvalidEvents\tarray<string>\tList of valid event names\t0.1.0","methods#Methods":"","__construct#__construct":"Parameters:\n$event: The name of the event.\n$data: Data for the event.\n$time: Timestamp for when the event happened.\nDescription: Initializes the event model. If the event is not in the list of valid events, it returns an error.Version: 0.1.0","fire#fire":"Description: Triggers the event.Version: 0.1.0"}},"/structure/classes/models/membership":{"title":"Membership Model","data":{"":"The Oberon Membership Model manages post meta values defined in the 'membership' post type and loads auxiliary data for the membership Model.","properties#Properties":"Property Name\tType\tDescription\tVersion\tid\tint\tThe membership ID\t0.1.0\tmembership_meta_keys\tarray\tMembership Meta Keys\t0.1.0\ttitle\tstring\tMembership Title\t0.1.0\tname\tstring\tMembership Name\t0.1.0\ttype\tstring\tMembership type\t0.1.0\tgroup_id\tint\tMembership Group ID\t0.1.0\tgroup_order\tint\tMembership Group Order\t0.1.0\tbilling_type\tstring\tMembership billing type\t0.1.0\tprice\tfloat\tMembership price\t0.1.0\tmembership_type\tstring\tMembership type\t0.1.0\tperiod\tint\tMembership period\t0.1.0\tperiod_type\tstring\tMembership period type\t0.1.0\tstatus\tstring\tMembership status\t0.1.0\trules\tarray\tMembership rules\t0.1.0\tis_recurring\tbool\tIndicates if the membership is recurring\t0.1.0","methods#Methods":"","__construct#__construct":"Parameters:\n$id: The membership ID or 0 to construct a new instance.\nDescription: Initializes the model. If no ID is provided or if the ID is not associated with a valid membership post type, the method returns without doing anything. Otherwise, it loads meta and auxiliary data.Version: 0.1.0","loadmeta#loadMeta":"Description: Loads the meta data for the membership post type. It retrieves meta values defined in the 'Oberon\\WordPress\\PostTypes\\Memberships' class.Version: 0.1.0","loadauxiliarydata#loadAuxiliaryData":"Description: Loads auxiliary data for the Post Model. This includes data natively set by WordPress post type, data that is a derivative of original meta data, and data not originally set by the membership post type class but still exists in the membership post type class.Version: 0.1.0","fields#fields":"Returns: ArrayDescription: Retrieves fields for the form using the MetaHelper.Version: 0.1.0","usage#Usage":"To construct a membership instance\n$membership = new \\Oberon\\Models\\Membership(1);"}},"/structure/classes/models/transaction":{"title":"Transaction Model","data":{"":"The Oberon Transaction Model is responsible for managing individual transaction details and associated database operations.","properties#Properties":"Property Name\tType\tDescription\tVersion\tid\tint\tTransaction ID.\t0.1.0\tsubscription_id\tint\tSubscription ID associated with the transaction.\t0.1.0\tcoupon_id\tint|null\tCoupon ID associated with the transaction. Null if there's no associated coupon.\t0.1.0\tprice\tfloat\tPrice of the transaction.\t0.1.0\ttotal\tfloat\tTotal amount of the transaction.\t0.1.0\ttax_amount\tfloat\tTax amount of the transaction.\t0.1.0\ttax_rate\tfloat\tTax rate of the transaction.\t0.1.0\ttax_class\tstring\tTax class of the transaction.\t0.1.0\tgateway_type\tstring\tGateway type used for the transaction.\t0.1.0\tprorated\tbool\tIndicates if the transaction is prorated.\t0.1.0\ttype\tstring\tType of the transaction (e.g., payment, refund).\t0.1.0\trenew\tbool\tIndicates if the transaction is for renewal.\t0.1.0\tpayment_id\tstring\tPayment ID of the transaction.\t0.1.0\tstatus\tstring\tStatus of the transaction.\t0.1.0\tcreated_at\tstring\tCreation timestamp.\t0.1.0\texpires_at\tstring\tExpiry timestamp.\t0.1.0","methods#Methods":"","construct#construct":"Parameters:\n$id (optional): Transaction ID or 0 to construct a new instance.\nDescription: Initializes the model. By default, if no ID is provided, constructs a new transaction.Version: 0.1.0","init#init":"Parameters:\n$data: Array of data to be assigned to the model.\n$id (optional): The transaction ID.\nDescription: Construct the model from inputted data.Version: 0.1.0","getvalue#getValue":"Parameters:\n$key: The key of the columns you want to retrieve.\nReturns: MixedDescription: Retrieve a piece of information from the transaction table based on the given key.Version: 0.1.0","save#save":"Returns: int|bool - ID on successful save, true on update success, and false on failure.Description: Save the transaction data to the database.Version: 0.1.0","delete#delete":"Returns: bool - True on successful deletion, false otherwise.Description: Delete the transaction from the database.Version: 0.1.0","usage#Usage":"To initialize a new transaction:\n$transaction = new \\Oberon\\Models\\Transaction();\nTo save the transaction to the database:\n$transaction->subscription_id = 123;\n// ... set other properties as required ...\n$transaction->save();"}},"/structure/classes/models/subscription":{"title":"Subscription Model","data":{"":"The Oberon Subscription Model is responsible for managing individual subscription details, transactions, and associated database operations.","properties#Properties":"Property Name\tType\tDescription\tVersion\tid\tint\tSubscription ID.\t0.1.0\tuser_id\tint\tUser ID associated with the subscription.\t0.1.0\tmembership_id\tint\tMembership ID associated with the subscription.\t0.1.0\tcoupon_id\tint|null\tCoupon ID associated with the subscription. Null if there's no associated coupon.\t0.1.0\tprice\tint\tPrice of the subscription.\t0.1.0\ttotal\tint\tTotal amount of the subscription.\t0.1.0\ttax_amount\tint\tTax amount of the subscription.\t0.1.0\ttax_rate\tint\tTax rate of the subscription.\t0.1.0\ttax_class\tstring|null\tTax class of the subscription. Null if not defined.\t0.1.0\tgateway_type\tstring\tGateway type used for the subscription.\t0.1.0\tperiod\tint\tPeriod of the subscription.\t0.1.0\tperiod_type\tstring\tPeriod type of the subscription (e.g., days, months).\t0.1.0\trenew\tbool\tIndicates if the subscription should be renewed.\t0.1.0\tstatus\tstring\tStatus of the subscription.\t0.1.0\tcreated_at\tstring\tCreation timestamp.\t0.1.0\texpires_at\tstring\tExpiry timestamp.\t0.1.0","methods#Methods":"","construct#construct":"Parameters:\n$id (optional): Membership ID or 0 to construct a new instance.\nDescription: Initializes the model. By default, if no ID is provided, constructs a new subscription.Version: 0.1.0","init#init":"Parameters:\n$data: Array of data to be assigned to the model.\n$id (optional): The subscription ID.\nDescription: Construct the model from inputted data.Version: 0.1.0","getvalue#getValue":"Parameters:\n$key: The key of the columns you want to retrieve.\nReturns: MixedDescription: Retrieve a piece of information from the subscription table based on the given key.Version: 0.1.0","save#save":"Returns: int|bool - ID on successful save, true on update success, and false on failure.Description: Save the subscription data to the database.Version: 0.1.0","delete#delete":"Returns: bool - True on successful deletion, false otherwise.Description: Delete the subscription from the database.Version: 0.1.0","transactions#transactions":"Returns: Transaction[] - Array of transactions.Description: Get the subscription transactions.Version: 0.1.0","gettransactionbasedvalues#getTransactionBasedValues":"Returns: voidDescription: Retrieve the expiry date from the transactions.Version: 0.1.0","usage#Usage":"To initialize a new subscription:\n$subscription = new \\Oberon\\Models\\Subscription();\nTo save the subscription to the database:\n$subscription->user_id = 123;\n$subscription->membership_id = 456;\n// ... set other properties as required ...\n$subscription->save();\nTo retrieve a subscription transactions\n$subscription->transactions();"}}}